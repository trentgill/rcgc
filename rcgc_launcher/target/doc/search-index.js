var searchIndex = {};
searchIndex["json"] = {"doc":"![](http://terhix.com/doc/json-rust-logo-small.png)","items":[[4,"Error","json","Error type of this crate.",null,null],[13,"UnexpectedCharacter","","",0,null],[12,"ch","json::Error","",0,null],[12,"line","","",0,null],[12,"column","","",0,null],[13,"UnexpectedEndOfJson","json","",0,null],[13,"ExceededDepthLimit","","",0,null],[13,"FailedUtf8Parsing","","",0,null],[13,"WrongType","","",0,null],[4,"JsonValue","","",null,null],[13,"Null","","",1,null],[13,"Short","","",1,null],[13,"String","","",1,null],[13,"Number","","",1,null],[13,"Boolean","","",1,null],[13,"Object","","",1,null],[13,"Array","","",1,null],[4,"JsonError","","Error type of this crate.",null,null],[13,"UnexpectedCharacter","","",0,null],[12,"ch","json::JsonError","",0,null],[12,"line","","",0,null],[12,"column","","",0,null],[13,"UnexpectedEndOfJson","json","",0,null],[13,"ExceededDepthLimit","","",0,null],[13,"FailedUtf8Parsing","","",0,null],[13,"WrongType","","",0,null],[5,"parse","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"from","","Convenience for `JsonValue::from(value)`",null,{"inputs":[{"name":"t"}],"output":{"name":"jsonvalue"}}],[5,"stringify","","Pretty prints out the value as JSON string.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"stringify_pretty","","Pretty prints out the value as JSON string. Second argument is a number of spaces to indent new blocks with.",null,{"inputs":[{"name":"t"},{"name":"u16"}],"output":{"name":"string"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"name":"option"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"name":"hashmap"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"name":"btreemap"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"isize"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i8"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i16"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"f32"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"number"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"object"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"object"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"bool"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_object","","Create an empty `JsonValue::Object` instance. When creating an object with data, consider using the `object!` macro.",1,{"inputs":[],"output":{"name":"jsonvalue"}}],[11,"new_array","","Create an empty `JsonValue::Array` instance. When creating array with data, consider using the `array!` macro.",1,{"inputs":[],"output":{"name":"jsonvalue"}}],[11,"dump","","Prints out the value as JSON string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"pretty","","Pretty prints out the value as JSON string. Takes an argument that's number of spaces to indent new blocks with.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"string"}}],[11,"to_writer","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"write","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_pretty","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"is_string","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_number","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_boolean","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_null","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_object","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_array","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Checks whether the value is empty. Returns true for:",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_number","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f32","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u32","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u16","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u8","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_usize","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i64","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i32","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i16","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i8","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_isize","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bool","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_fixed_point_u64","","Obtain an integer at a fixed decimal point. This is useful for converting monetary values and doing arithmetic on them without rounding errors introduced by floating point operations.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"as_fixed_point_i64","","Analog to `as_fixed_point_u64`, except returning a signed `i64`, properly handling negative numbers.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"take","","Take over the ownership of the value, leaving `Null` in it's place.",1,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"take_string","","Checks that self is a string, returns an owned Rust `String`, leaving `Null` in it's place.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Works on `JsonValue::Array` - pushes a new value to the array.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","Works on `JsonValue::Array` - remove and return last element from an array. On failure returns a null.",1,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"contains","","Works on `JsonValue::Array` - checks if the array contains a value",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"has_key","","Works on `JsonValue::Object` - checks if the object has a key",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"len","","Returns length of array or object (number of keys), defaults to `0` for other types.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"members","","Works on `JsonValue::Array` - returns an iterator over members. Will return an empty iterator if called on non-array types.",1,{"inputs":[{"name":"self"}],"output":{"name":"members"}}],[11,"members_mut","","Works on `JsonValue::Array` - returns a mutable iterator over members. Will return an empty iterator if called on non-array types.",1,{"inputs":[{"name":"self"}],"output":{"name":"membersmut"}}],[11,"entries","","Works on `JsonValue::Object` - returns an iterator over key value pairs. Will return an empty iterator if called on non-object types.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"entries_mut","","Works on `JsonValue::Object` - returns a mutable iterator over key value pairs. Will return an empty iterator if called on non-object types.",1,{"inputs":[{"name":"self"}],"output":{"name":"entriesmut"}}],[11,"remove","","Works on `JsonValue::Object` - remove a key and return the value it held. If the key was not present, the method is called on anything but an object, it will return a null.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"array_remove","","Works on `JsonValue::Array` - remove an entry and return the value it held. If the method is called on anything but an object or if the index is out of bounds, it will return `JsonValue::Null`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"clear","","When called on an array or an object, will wipe them clean. When called on a string will clear the string. Numbers and booleans become null.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"wrong_type","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"short","","",null,null],[3,"Short","json::short","",null,null],[17,"MAX_LEN","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"short"}}],[11,"from_slice","","Creates a `Short` from a `&str` slice. This method can cause buffer overflow if the length of the slice is larger than `MAX_LEN`, which is why it is marked as `unsafe`.",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"as_str","","Cheaply obtain a `&str` slice out of the `Short`.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"short"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[0,"object","json","",null,null],[3,"Object","json::object","A binary tree implementation of a string -> `JsonValue` map. You normally don't have to interact with instances of `Object`, much more likely you will be using the `JsonValue::Object` variant, which wraps around this struct.",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty instance of `Object`. Empty `Object` performs no allocation until a value is inserted into it.",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Object` with memory preallocated for `capacity` number of entries.",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert","","Insert a new entry, or override an existing one. Note that `key` has to be a `&str` slice and not an owned `String`. The internals of `Object` will handle the heap allocation of the key if needed for better performance.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"jsonvalue"}],"output":null}],[11,"override_last","","",3,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":null}],[11,"get","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"remove","","Attempts to remove the value behind `key`, if successful will return the `JsonValue` stored behind the `key`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Wipe the `Object` clear. The capacity will remain untouched.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"object"}],"output":{"name":"bool"}}],[11,"empty","","Create an empty iterator that always returns `None`",4,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"empty","","Create an empty iterator that always returns `None`",5,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[0,"number","json","",null,null],[3,"Number","json::number","Number representation used inside `JsonValue`. You can easily convert the `Number` type into native Rust number types and back, or use the equality operator with another number type.",null,null],[17,"NAN","","NaN value represented in `Number` type. NaN is equal to itself.",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_parts","","Construct a new `Number` from parts. This can't create a NaN value.",6,{"inputs":[{"name":"bool"},{"name":"u64"},{"name":"i16"}],"output":{"name":"self"}}],[11,"as_parts","","Reverse to `from_parts` - obtain parts from an existing `Number`.",6,null],[11,"is_sign_positive","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_nan","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Test if the number is NaN or has a zero value.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_fixed_point_u64","","Obtain an integer at a fixed decimal point. This is useful for converting monetary values and doing arithmetic on them without rounding errors introduced by floating point operations.",6,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"as_fixed_point_i64","","Analog to `as_fixed_point_u64`, except returning a signed `i64`, properly handling negative numbers.",6,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"number"}}],[11,"from","","",6,{"inputs":[{"name":"f32"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"neg","","",6,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[0,"iterators","json","",null,null],[6,"Members","json::iterators","Iterator over members of `JsonValue::Array`.",null,null],[6,"MembersMut","","Mutable iterator over members of `JsonValue::Array`.",null,null],[6,"Entries","","Iterator over key value pairs of `JsonValue::Object`.",null,null],[6,"EntriesMut","","Mutable iterator over key value pairs of `JsonValue::Object`.",null,null],[6,"Result","json","Result type used by this crate.",null,null],[6,"Array","","",null,null],[14,"array","","Helper macro for creating instances of `JsonValue::Array`.",null,null],[14,"object","","Helper macro for creating instances of `JsonValue::Object`.",null,null],[11,"eq","json::number","",6,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":{"name":"bool"}}],[11,"eq","json::object","",3,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[4,"JsonValue"],[3,"Short"],[3,"Object"],[3,"Iter"],[3,"IterMut"],[3,"Number"]]};
searchIndex["rcgc_launcher"] = {"doc":"","items":[[3,"ShellArgs","rcgc_launcher","",null,null],[12,"path","","",0,null],[5,"path_to_json","","",null,{"inputs":[{"name":"string"}],"output":{"name":"result"}}],[5,"unwrap_or_stderr","","Unwraps a Result or exits & prints Err as formatted string to stderr",null,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"new","","",0,null]],"paths":[[3,"ShellArgs"]]};
initSearch(searchIndex);
